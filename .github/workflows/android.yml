name: publish

on:
  push:
    branches:
      - release

# 1) prepare-release: create a draft GitHub Release with tag app-v<version>
# 2) publish-tauri: matrix build for desktop (uses tauri-action)
# 3) build-android: build Android apk/aab and attach to same release

jobs:
  prepare-release:
    runs-on: ubuntu-22.04
    outputs:
      release_tag: ${{ steps.get_meta.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - id: get_meta
        name: get package version and tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TAG="app-v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: create draft GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_meta.outputs.tag }}
          release_name: ${{ steps.get_meta.outputs.tag }}
          body: 'See the assets to download this version and install.'
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-tauri:
    needs: prepare-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # only used on macos in this example but harmless elsewhere
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install linux deps (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: bun install

      - name: tauri build + upload desktop artifacts to release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.prepare-release.outputs.release_tag }}
          releaseName: ${{ needs.prepare-release.outputs.release_tag }}
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-android:
    needs: prepare-release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: setup Java (required by Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: install Android SDK + NDK + CMake
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          ndk: 26.1.10909125
          cmake: 3.22.1
          cache: gradle

      - name: install Rust (with Android targets)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: install cargo-ndk
        run: cargo install cargo-ndk --locked

      - name: install frontend dependencies
        run: bun install

      - name: build frontend (bundle)
        run: bun run build

      - name: build Android (Gradle)
        working-directory: src-tauri/gen/android
        run: |
          # assembleRelease requires signing config to produce a signed APK/AAB.
          # If you don't have a keystore configured in Gradle, this will produce an unsigned artifact.
          ./gradlew assembleRelease --no-daemon

      - name: find built artifact
        id: find_artifact
        run: |
          # Try both APK and AAB locations. Adjust if your android project differs.
          APK_PATH=$(find src-tauri/gen/android -path "*/app/build/outputs/apk/release/*.apk" -print -quit || true)
          AAB_PATH=$(find src-tauri/gen/android -path "*/app/build/outputs/bundle/release/*.aab" -print -quit || true)
          if [ -n "$APK_PATH" ]; then
            echo "asset_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "asset_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT
            echo "asset_content_type=application/vnd.android.package-archive" >> $GITHUB_OUTPUT
          elif [ -n "$AAB_PATH" ]; then
            echo "asset_path=$AAB_PATH" >> $GITHUB_OUTPUT
            echo "asset_name=$(basename $AAB_PATH)" >> $GITHUB_OUTPUT
            echo "asset_content_type=application/octet-stream" >> $GITHUB_OUTPUT
          else
            echo "No APK or AAB found!" >&2
            exit 1
          fi

      - name: upload Android artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.asset_path }}
          asset_name: ${{ steps.find_artifact.outputs.asset_name }}
          asset_content_type: ${{ steps.
